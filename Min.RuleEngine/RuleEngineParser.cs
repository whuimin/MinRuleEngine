//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ../../Min.RuleEngine\RuleEngine.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Min.RuleEngine {
#pragma warning disable 3021
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class RuleEngineParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, TRUE=16, FALSE=17, 
		NULL=18, BOOL=19, CHAR=20, DECIMAL=21, DOUBLE=22, FLOAT=23, INT=24, LONG=25, 
		SHORT=26, STRING=27, OPEN_PARENS=28, CLOSE_PARENS=29, OPEN_BRACE=30, CLOSE_BRACE=31, 
		PLUS=32, MINUS=33, TIMES=34, DIV=35, PERCENT=36, GT=37, LT=38, OP_GT=39, 
		OP_LT=40, OP_EQ=41, OP_NE=42, OP_AND=43, OP_OR=44, BANG=45, COMMA=46, 
		DOT=47, SEMICOLON=48, IDENTIFIER=49, CHARACTER_LITERAL=50, REGULAR_STRING=51, 
		LITERAL_ACCESS=52, INTEGER_LITERAL=53, REAL_LITERAL=54, SINGLE_LINE_DOC_COMMENT=55, 
		DELIMITED_DOC_COMMENT=56, SINGLE_LINE_COMMENT=57, DELIMITED_COMMENT=58, 
		WHITESPACES=59;
	public const int
		RULE_jRule = 0, RULE_declarationStatementList = 1, RULE_declarationStatement = 2, 
		RULE_parameterDeclaration = 3, RULE_variableDeclaration = 4, RULE_parameterDeclarator = 5, 
		RULE_variableDeclarator = 6, RULE_variableInitializer = 7, RULE_arrayInitializer = 8, 
		RULE_expressionStatement = 9, RULE_ruleStatement = 10, RULE_whenThenStatement = 11, 
		RULE_whenStatement = 12, RULE_thenStatement = 13, RULE_elseStatement = 14, 
		RULE_expression = 15, RULE_assignment = 16, RULE_assignmentOperator = 17, 
		RULE_nonAssignmentExpression = 18, RULE_conditionalExpression = 19, RULE_conditionalOrExpression = 20, 
		RULE_conditionalAndExpression = 21, RULE_equalityExpression = 22, RULE_relationalExpression = 23, 
		RULE_additiveExpression = 24, RULE_multiplicativeExpression = 25, RULE_unaryExpression = 26, 
		RULE_primaryExpression = 27, RULE_primaryExpressionStart = 28, RULE_literalExpression = 29, 
		RULE_simpleNameExpression = 30, RULE_parenthesisExpressions = 31, RULE_memberAccessExpression = 32, 
		RULE_literalAccessExpression = 33, RULE_literal = 34, RULE_booleanLiteral = 35, 
		RULE_stringLiteral = 36, RULE_memberAccess = 37, RULE_bracketExpression = 38, 
		RULE_indexerArgument = 39, RULE_methodInvocation = 40, RULE_predefinedType = 41, 
		RULE_baseType = 42, RULE_simpleType = 43, RULE_numericType = 44, RULE_integralType = 45, 
		RULE_floatingPointType = 46, RULE_classType = 47, RULE_boolType = 48, 
		RULE_stringType = 49, RULE_namespaceOrTypeName = 50, RULE_identifier = 51, 
		RULE_typeArgumentList = 52, RULE_argumentList = 53, RULE_argument = 54, 
		RULE_qualifiedAliasMember = 55;
	public static readonly string[] ruleNames = {
		"jRule", "declarationStatementList", "declarationStatement", "parameterDeclaration", 
		"variableDeclaration", "parameterDeclarator", "variableDeclarator", "variableInitializer", 
		"arrayInitializer", "expressionStatement", "ruleStatement", "whenThenStatement", 
		"whenStatement", "thenStatement", "elseStatement", "expression", "assignment", 
		"assignmentOperator", "nonAssignmentExpression", "conditionalExpression", 
		"conditionalOrExpression", "conditionalAndExpression", "equalityExpression", 
		"relationalExpression", "additiveExpression", "multiplicativeExpression", 
		"unaryExpression", "primaryExpression", "primaryExpressionStart", "literalExpression", 
		"simpleNameExpression", "parenthesisExpressions", "memberAccessExpression", 
		"literalAccessExpression", "literal", "booleanLiteral", "stringLiteral", 
		"memberAccess", "bracketExpression", "indexerArgument", "methodInvocation", 
		"predefinedType", "baseType", "simpleType", "numericType", "integralType", 
		"floatingPointType", "classType", "boolType", "stringType", "namespaceOrTypeName", 
		"identifier", "typeArgumentList", "argumentList", "argument", "qualifiedAliasMember"
	};

	private static readonly string[] _LiteralNames = {
		null, "'='", "'when'", "'then'", "'else'", "'+='", "'-='", "'*='", "'/='", 
		"'%='", "'&='", "'|='", "'^='", "'?'", "':'", "'::'", "'true'", "'false'", 
		"'null'", "'bool'", "'char'", "'decimal'", "'double'", "'float'", "'int'", 
		"'long'", "'short'", "'string'", "'('", "')'", "'['", "']'", "'+'", "'-'", 
		"'*'", "'/'", "'%'", "'>'", "'<'", "'>='", "'<='", "'=='", "'!='", "'&&'", 
		"'||'", "'!'", "','", "'.'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "TRUE", "FALSE", "NULL", "BOOL", "CHAR", "DECIMAL", 
		"DOUBLE", "FLOAT", "INT", "LONG", "SHORT", "STRING", "OPEN_PARENS", "CLOSE_PARENS", 
		"OPEN_BRACE", "CLOSE_BRACE", "PLUS", "MINUS", "TIMES", "DIV", "PERCENT", 
		"GT", "LT", "OP_GT", "OP_LT", "OP_EQ", "OP_NE", "OP_AND", "OP_OR", "BANG", 
		"COMMA", "DOT", "SEMICOLON", "IDENTIFIER", "CHARACTER_LITERAL", "REGULAR_STRING", 
		"LITERAL_ACCESS", "INTEGER_LITERAL", "REAL_LITERAL", "SINGLE_LINE_DOC_COMMENT", 
		"DELIMITED_DOC_COMMENT", "SINGLE_LINE_COMMENT", "DELIMITED_COMMENT", "WHITESPACES"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RuleEngine.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static RuleEngineParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RuleEngineParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RuleEngineParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class JRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationStatementListContext declarationStatementList() {
			return GetRuleContext<DeclarationStatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleStatementContext ruleStatement() {
			return GetRuleContext<RuleStatementContext>(0);
		}
		public JRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JRuleContext jRule() {
		JRuleContext _localctx = new JRuleContext(Context, State);
		EnterRule(_localctx, 0, RULE_jRule);
		int _la;
		try {
			State = 120;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 113;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 112;
					declarationStatementList();
					}
					break;
				}
				State = 115;
				expressionStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOL) | (1L << DECIMAL) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << SHORT) | (1L << STRING) | (1L << IDENTIFIER))) != 0)) {
					{
					State = 116;
					declarationStatementList();
					}
				}

				State = 119;
				ruleStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationStatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationStatementContext[] declarationStatement() {
			return GetRuleContexts<DeclarationStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationStatementContext declarationStatement(int i) {
			return GetRuleContext<DeclarationStatementContext>(i);
		}
		public DeclarationStatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationStatementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationStatementListContext declarationStatementList() {
		DeclarationStatementListContext _localctx = new DeclarationStatementListContext(Context, State);
		EnterRule(_localctx, 2, RULE_declarationStatementList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			declarationStatement();
			State = 126;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 123;
					declarationStatement();
					}
					} 
				}
				State = 128;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterDeclarationContext parameterDeclaration() {
			return GetRuleContext<ParameterDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public DeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationStatementContext declarationStatement() {
		DeclarationStatementContext _localctx = new DeclarationStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_declarationStatement);
		try {
			State = 131;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 129;
				parameterDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 130;
				variableDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterDeclaratorContext parameterDeclarator() {
			return GetRuleContext<ParameterDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(RuleEngineParser.SEMICOLON, 0); }
		public ParameterDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterDeclarationContext parameterDeclaration() {
		ParameterDeclarationContext _localctx = new ParameterDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_parameterDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			baseType();
			State = 134;
			parameterDeclarator();
			State = 135;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorContext variableDeclarator() {
			return GetRuleContext<VariableDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(RuleEngineParser.SEMICOLON, 0); }
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_variableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			baseType();
			State = 138;
			variableDeclarator();
			State = 139;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterDeclaratorContext parameterDeclarator() {
		ParameterDeclaratorContext _localctx = new ParameterDeclaratorContext(Context, State);
		EnterRule(_localctx, 10, RULE_parameterDeclarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableInitializerContext variableInitializer() {
			return GetRuleContext<VariableInitializerContext>(0);
		}
		public VariableDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorContext variableDeclarator() {
		VariableDeclaratorContext _localctx = new VariableDeclaratorContext(Context, State);
		EnterRule(_localctx, 12, RULE_variableDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			identifier();
			State = 144;
			Match(T__0);
			State = 146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TRUE) | (1L << FALSE) | (1L << NULL) | (1L << BOOL) | (1L << CHAR) | (1L << DECIMAL) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << SHORT) | (1L << STRING) | (1L << OPEN_PARENS) | (1L << OPEN_BRACE) | (1L << PLUS) | (1L << MINUS) | (1L << BANG) | (1L << IDENTIFIER) | (1L << CHARACTER_LITERAL) | (1L << REGULAR_STRING) | (1L << LITERAL_ACCESS) | (1L << INTEGER_LITERAL) | (1L << REAL_LITERAL))) != 0)) {
				{
				State = 145;
				variableInitializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		public VariableInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableInitializerContext variableInitializer() {
		VariableInitializerContext _localctx = new VariableInitializerContext(Context, State);
		EnterRule(_localctx, 14, RULE_variableInitializer);
		try {
			State = 150;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
			case FALSE:
			case NULL:
			case BOOL:
			case CHAR:
			case DECIMAL:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
			case STRING:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case BANG:
			case IDENTIFIER:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case REAL_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 148;
				expression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 149;
				arrayInitializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(RuleEngineParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(RuleEngineParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableInitializerContext[] variableInitializer() {
			return GetRuleContexts<VariableInitializerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableInitializerContext variableInitializer(int i) {
			return GetRuleContext<VariableInitializerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RuleEngineParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RuleEngineParser.COMMA, i);
		}
		public ArrayInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayInitializerContext arrayInitializer() {
		ArrayInitializerContext _localctx = new ArrayInitializerContext(Context, State);
		EnterRule(_localctx, 16, RULE_arrayInitializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			Match(OPEN_BRACE);
			State = 164;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TRUE) | (1L << FALSE) | (1L << NULL) | (1L << BOOL) | (1L << CHAR) | (1L << DECIMAL) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << SHORT) | (1L << STRING) | (1L << OPEN_PARENS) | (1L << OPEN_BRACE) | (1L << PLUS) | (1L << MINUS) | (1L << BANG) | (1L << IDENTIFIER) | (1L << CHARACTER_LITERAL) | (1L << REGULAR_STRING) | (1L << LITERAL_ACCESS) | (1L << INTEGER_LITERAL) | (1L << REAL_LITERAL))) != 0)) {
				{
				State = 153;
				variableInitializer();
				State = 158;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 154;
						Match(COMMA);
						State = 155;
						variableInitializer();
						}
						} 
					}
					State = 160;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				}
				State = 162;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 161;
					Match(COMMA);
					}
				}

				}
			}

			State = 166;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(RuleEngineParser.SEMICOLON, 0); }
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			expression();
			State = 169;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WhenThenStatementContext[] whenThenStatement() {
			return GetRuleContexts<WhenThenStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhenThenStatementContext whenThenStatement(int i) {
			return GetRuleContext<WhenThenStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public RuleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleStatementContext ruleStatement() {
		RuleStatementContext _localctx = new RuleStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_ruleStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171;
			whenThenStatement();
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 172;
				whenThenStatement();
				}
				}
				State = 177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 178;
			elseStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhenThenStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WhenStatementContext whenStatement() {
			return GetRuleContext<WhenStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThenStatementContext thenStatement() {
			return GetRuleContext<ThenStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(RuleEngineParser.SEMICOLON, 0); }
		public WhenThenStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whenThenStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhenThenStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhenThenStatementContext whenThenStatement() {
		WhenThenStatementContext _localctx = new WhenThenStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_whenThenStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			whenStatement();
			State = 181;
			thenStatement();
			State = 182;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhenStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(RuleEngineParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(RuleEngineParser.CLOSE_PARENS, 0); }
		public WhenStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whenStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhenStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhenStatementContext whenStatement() {
		WhenStatementContext _localctx = new WhenStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_whenStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			Match(T__1);
			State = 185;
			Match(OPEN_PARENS);
			State = 186;
			expression();
			State = 187;
			Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThenStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(RuleEngineParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(RuleEngineParser.CLOSE_PARENS, 0); }
		public ThenStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thenStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThenStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThenStatementContext thenStatement() {
		ThenStatementContext _localctx = new ThenStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_thenStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			Match(T__2);
			State = 190;
			Match(OPEN_PARENS);
			State = 191;
			expression();
			State = 192;
			Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(RuleEngineParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(RuleEngineParser.CLOSE_PARENS, 0); }
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			Match(T__3);
			State = 195;
			Match(OPEN_PARENS);
			State = 196;
			expression();
			State = 197;
			Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NonAssignmentExpressionContext nonAssignmentExpression() {
			return GetRuleContext<NonAssignmentExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_expression);
		try {
			State = 201;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 199;
				assignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 200;
				nonAssignmentExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 32, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			unaryExpression();
			State = 204;
			assignmentOperator();
			State = 205;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 34, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonAssignmentExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public NonAssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonAssignmentExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonAssignmentExpressionContext nonAssignmentExpression() {
		NonAssignmentExpressionContext _localctx = new NonAssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_nonAssignmentExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			conditionalExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalOrExpressionContext conditionalOrExpression() {
			return GetRuleContext<ConditionalOrExpressionContext>(0);
		}
		public ConditionalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalExpressionContext conditionalExpression() {
		ConditionalExpressionContext _localctx = new ConditionalExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_conditionalExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			conditionalOrExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalOrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalAndExpressionContext[] conditionalAndExpression() {
			return GetRuleContexts<ConditionalAndExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalAndExpressionContext conditionalAndExpression(int i) {
			return GetRuleContext<ConditionalAndExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_OR() { return GetTokens(RuleEngineParser.OP_OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_OR(int i) {
			return GetToken(RuleEngineParser.OP_OR, i);
		}
		public ConditionalOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalOrExpressionContext conditionalOrExpression() {
		ConditionalOrExpressionContext _localctx = new ConditionalOrExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_conditionalOrExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			conditionalAndExpression();
			State = 218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OP_OR) {
				{
				{
				State = 214;
				Match(OP_OR);
				State = 215;
				conditionalAndExpression();
				}
				}
				State = 220;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalAndExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext[] equalityExpression() {
			return GetRuleContexts<EqualityExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression(int i) {
			return GetRuleContext<EqualityExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_AND() { return GetTokens(RuleEngineParser.OP_AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND(int i) {
			return GetToken(RuleEngineParser.OP_AND, i);
		}
		public ConditionalAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalAndExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalAndExpressionContext conditionalAndExpression() {
		ConditionalAndExpressionContext _localctx = new ConditionalAndExpressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_conditionalAndExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221;
			equalityExpression();
			State = 226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OP_AND) {
				{
				{
				State = 222;
				Match(OP_AND);
				State = 223;
				equalityExpression();
				}
				}
				State = 228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext[] relationalExpression() {
			return GetRuleContexts<RelationalExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression(int i) {
			return GetRuleContext<RelationalExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_EQ() { return GetTokens(RuleEngineParser.OP_EQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQ(int i) {
			return GetToken(RuleEngineParser.OP_EQ, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_NE() { return GetTokens(RuleEngineParser.OP_NE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NE(int i) {
			return GetToken(RuleEngineParser.OP_NE, i);
		}
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_equalityExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			relationalExpression();
			State = 234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OP_EQ || _la==OP_NE) {
				{
				{
				State = 230;
				_la = TokenStream.LA(1);
				if ( !(_la==OP_EQ || _la==OP_NE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 231;
				relationalExpression();
				}
				}
				State = 236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext[] additiveExpression() {
			return GetRuleContexts<AdditiveExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext additiveExpression(int i) {
			return GetRuleContext<AdditiveExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LT() { return GetTokens(RuleEngineParser.LT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT(int i) {
			return GetToken(RuleEngineParser.LT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GT() { return GetTokens(RuleEngineParser.GT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT(int i) {
			return GetToken(RuleEngineParser.GT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_LT() { return GetTokens(RuleEngineParser.OP_LT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LT(int i) {
			return GetToken(RuleEngineParser.OP_LT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_GT() { return GetTokens(RuleEngineParser.OP_GT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GT(int i) {
			return GetToken(RuleEngineParser.OP_GT, i);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_relationalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			additiveExpression();
			State = 242;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GT) | (1L << LT) | (1L << OP_GT) | (1L << OP_LT))) != 0)) {
				{
				{
				State = 238;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GT) | (1L << LT) | (1L << OP_GT) | (1L << OP_LT))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 239;
				additiveExpression();
				}
				}
				State = 244;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext[] multiplicativeExpression() {
			return GetRuleContexts<MultiplicativeExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext multiplicativeExpression(int i) {
			return GetRuleContext<MultiplicativeExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(RuleEngineParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(RuleEngineParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(RuleEngineParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(RuleEngineParser.MINUS, i);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_additiveExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			multiplicativeExpression();
			State = 250;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 246;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 247;
				multiplicativeExpression();
				}
				}
				State = 252;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext[] unaryExpression() {
			return GetRuleContexts<UnaryExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression(int i) {
			return GetRuleContext<UnaryExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TIMES() { return GetTokens(RuleEngineParser.TIMES); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES(int i) {
			return GetToken(RuleEngineParser.TIMES, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(RuleEngineParser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(RuleEngineParser.DIV, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PERCENT() { return GetTokens(RuleEngineParser.PERCENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT(int i) {
			return GetToken(RuleEngineParser.PERCENT, i);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, State);
		EnterRule(_localctx, 50, RULE_multiplicativeExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			unaryExpression();
			State = 258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TIMES) | (1L << DIV) | (1L << PERCENT))) != 0)) {
				{
				{
				State = 254;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TIMES) | (1L << DIV) | (1L << PERCENT))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 255;
				unaryExpression();
				}
				}
				State = 260;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(RuleEngineParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(RuleEngineParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(RuleEngineParser.BANG, 0); }
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 52, RULE_unaryExpression);
		try {
			State = 268;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
			case FALSE:
			case NULL:
			case BOOL:
			case CHAR:
			case DECIMAL:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
			case STRING:
			case OPEN_PARENS:
			case IDENTIFIER:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case REAL_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 261;
				primaryExpression();
				}
				break;
			case PLUS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 262;
				Match(PLUS);
				State = 263;
				unaryExpression();
				}
				break;
			case MINUS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 264;
				Match(MINUS);
				State = 265;
				unaryExpression();
				}
				break;
			case BANG:
				EnterOuterAlt(_localctx, 4);
				{
				State = 266;
				Match(BANG);
				State = 267;
				unaryExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		public PrimaryExpressionStartContext pe;
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionStartContext primaryExpressionStart() {
			return GetRuleContext<PrimaryExpressionStartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BANG() { return GetTokens(RuleEngineParser.BANG); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG(int i) {
			return GetToken(RuleEngineParser.BANG, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BracketExpressionContext[] bracketExpression() {
			return GetRuleContexts<BracketExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BracketExpressionContext bracketExpression(int i) {
			return GetRuleContext<BracketExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberAccessContext[] memberAccess() {
			return GetRuleContexts<MemberAccessContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberAccessContext memberAccess(int i) {
			return GetRuleContext<MemberAccessContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodInvocationContext[] methodInvocation() {
			return GetRuleContexts<MethodInvocationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodInvocationContext methodInvocation(int i) {
			return GetRuleContext<MethodInvocationContext>(i);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 54, RULE_primaryExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 270;
			_localctx.pe = primaryExpressionStart();
			State = 272;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				State = 271;
				Match(BANG);
				}
				break;
			}
			State = 277;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 274;
					bracketExpression();
					}
					} 
				}
				State = 279;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			State = 281;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BANG) {
				{
				State = 280;
				Match(BANG);
				}
			}

			State = 301;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << OPEN_PARENS) | (1L << DOT))) != 0)) {
				{
				{
				{
				State = 285;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__12:
				case DOT:
					{
					State = 283;
					memberAccess();
					}
					break;
				case OPEN_PARENS:
					{
					State = 284;
					methodInvocation();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 288;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
				case 1:
					{
					State = 287;
					Match(BANG);
					}
					break;
				}
				}
				State = 293;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 290;
						bracketExpression();
						}
						} 
					}
					State = 295;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
				}
				State = 297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BANG) {
					{
					State = 296;
					Match(BANG);
					}
				}

				}
				}
				State = 303;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionStartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralExpressionContext literalExpression() {
			return GetRuleContext<LiteralExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleNameExpressionContext simpleNameExpression() {
			return GetRuleContext<SimpleNameExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesisExpressionsContext parenthesisExpressions() {
			return GetRuleContext<ParenthesisExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberAccessExpressionContext memberAccessExpression() {
			return GetRuleContext<MemberAccessExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralAccessExpressionContext literalAccessExpression() {
			return GetRuleContext<LiteralAccessExpressionContext>(0);
		}
		public PrimaryExpressionStartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpressionStart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpressionStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionStartContext primaryExpressionStart() {
		PrimaryExpressionStartContext _localctx = new PrimaryExpressionStartContext(Context, State);
		EnterRule(_localctx, 56, RULE_primaryExpressionStart);
		try {
			State = 309;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 304;
				literalExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 305;
				simpleNameExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 306;
				parenthesisExpressions();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 307;
				memberAccessExpression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 308;
				literalAccessExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralExpressionContext literalExpression() {
		LiteralExpressionContext _localctx = new LiteralExpressionContext(Context, State);
		EnterRule(_localctx, 58, RULE_literalExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleNameExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public SimpleNameExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleNameExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleNameExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleNameExpressionContext simpleNameExpression() {
		SimpleNameExpressionContext _localctx = new SimpleNameExpressionContext(Context, State);
		EnterRule(_localctx, 60, RULE_simpleNameExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313;
			identifier();
			State = 315;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 314;
				typeArgumentList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesisExpressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(RuleEngineParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(RuleEngineParser.CLOSE_PARENS, 0); }
		public ParenthesisExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesisExpressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParenthesisExpressionsContext parenthesisExpressions() {
		ParenthesisExpressionsContext _localctx = new ParenthesisExpressionsContext(Context, State);
		EnterRule(_localctx, 62, RULE_parenthesisExpressions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317;
			Match(OPEN_PARENS);
			State = 318;
			expression();
			State = 319;
			Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberAccessExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredefinedTypeContext predefinedType() {
			return GetRuleContext<PredefinedTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedAliasMemberContext qualifiedAliasMember() {
			return GetRuleContext<QualifiedAliasMemberContext>(0);
		}
		public MemberAccessExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberAccessExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberAccessExpressionContext memberAccessExpression() {
		MemberAccessExpressionContext _localctx = new MemberAccessExpressionContext(Context, State);
		EnterRule(_localctx, 64, RULE_memberAccessExpression);
		try {
			State = 323;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL:
			case CHAR:
			case DECIMAL:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 321;
				predefinedType();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 322;
				qualifiedAliasMember();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralAccessExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_ACCESS() { return GetToken(RuleEngineParser.LITERAL_ACCESS, 0); }
		public LiteralAccessExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalAccessExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralAccessExpressionContext literalAccessExpression() {
		LiteralAccessExpressionContext _localctx = new LiteralAccessExpressionContext(Context, State);
		EnterRule(_localctx, 66, RULE_literalAccessExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			Match(LITERAL_ACCESS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(RuleEngineParser.INTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_LITERAL() { return GetToken(RuleEngineParser.REAL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER_LITERAL() { return GetToken(RuleEngineParser.CHARACTER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(RuleEngineParser.NULL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 68, RULE_literal);
		try {
			State = 333;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
			case FALSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 327;
				booleanLiteral();
				}
				break;
			case REGULAR_STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 328;
				stringLiteral();
				}
				break;
			case INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 329;
				Match(INTEGER_LITERAL);
				}
				break;
			case REAL_LITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 330;
				Match(REAL_LITERAL);
				}
				break;
			case CHARACTER_LITERAL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 331;
				Match(CHARACTER_LITERAL);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 332;
				Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(RuleEngineParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(RuleEngineParser.FALSE, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
		EnterRule(_localctx, 70, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGULAR_STRING() { return GetToken(RuleEngineParser.REGULAR_STRING, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 72, RULE_stringLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337;
			Match(REGULAR_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(RuleEngineParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public MemberAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberAccessContext memberAccess() {
		MemberAccessContext _localctx = new MemberAccessContext(Context, State);
		EnterRule(_localctx, 74, RULE_memberAccess);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 340;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 339;
				Match(T__12);
				}
			}

			State = 342;
			Match(DOT);
			State = 343;
			identifier();
			State = 345;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 344;
				typeArgumentList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BracketExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(RuleEngineParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexerArgumentContext[] indexerArgument() {
			return GetRuleContexts<IndexerArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexerArgumentContext indexerArgument(int i) {
			return GetRuleContext<IndexerArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(RuleEngineParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RuleEngineParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RuleEngineParser.COMMA, i);
		}
		public BracketExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracketExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracketExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BracketExpressionContext bracketExpression() {
		BracketExpressionContext _localctx = new BracketExpressionContext(Context, State);
		EnterRule(_localctx, 76, RULE_bracketExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 347;
				Match(T__12);
				}
			}

			State = 350;
			Match(OPEN_BRACE);
			State = 351;
			indexerArgument();
			State = 356;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 352;
				Match(COMMA);
				State = 353;
				indexerArgument();
				}
				}
				State = 358;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 359;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexerArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IndexerArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexerArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexerArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexerArgumentContext indexerArgument() {
		IndexerArgumentContext _localctx = new IndexerArgumentContext(Context, State);
		EnterRule(_localctx, 78, RULE_indexerArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 361;
				identifier();
				State = 362;
				Match(T__13);
				}
				break;
			}
			State = 366;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodInvocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(RuleEngineParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(RuleEngineParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public MethodInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodInvocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodInvocationContext methodInvocation() {
		MethodInvocationContext _localctx = new MethodInvocationContext(Context, State);
		EnterRule(_localctx, 80, RULE_methodInvocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368;
			Match(OPEN_PARENS);
			State = 370;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TRUE) | (1L << FALSE) | (1L << NULL) | (1L << BOOL) | (1L << CHAR) | (1L << DECIMAL) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << SHORT) | (1L << STRING) | (1L << OPEN_PARENS) | (1L << PLUS) | (1L << MINUS) | (1L << BANG) | (1L << IDENTIFIER) | (1L << CHARACTER_LITERAL) | (1L << REGULAR_STRING) | (1L << LITERAL_ACCESS) | (1L << INTEGER_LITERAL) | (1L << REAL_LITERAL))) != 0)) {
				{
				State = 369;
				argumentList();
				}
			}

			State = 372;
			Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredefinedTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(RuleEngineParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(RuleEngineParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(RuleEngineParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(RuleEngineParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(RuleEngineParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(RuleEngineParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG() { return GetToken(RuleEngineParser.LONG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHORT() { return GetToken(RuleEngineParser.SHORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(RuleEngineParser.STRING, 0); }
		public PredefinedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predefinedType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredefinedType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredefinedTypeContext predefinedType() {
		PredefinedTypeContext _localctx = new PredefinedTypeContext(Context, State);
		EnterRule(_localctx, 82, RULE_predefinedType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOL) | (1L << CHAR) | (1L << DECIMAL) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << SHORT) | (1L << STRING))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public BaseTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypeContext baseType() {
		BaseTypeContext _localctx = new BaseTypeContext(Context, State);
		EnterRule(_localctx, 84, RULE_baseType);
		try {
			State = 378;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL:
			case DECIMAL:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 376;
				simpleType();
				}
				break;
			case STRING:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 377;
				classType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericTypeContext numericType() {
			return GetRuleContext<NumericTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolTypeContext boolType() {
			return GetRuleContext<BoolTypeContext>(0);
		}
		public SimpleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeContext simpleType() {
		SimpleTypeContext _localctx = new SimpleTypeContext(Context, State);
		EnterRule(_localctx, 86, RULE_simpleType);
		try {
			State = 382;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECIMAL:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 380;
				numericType();
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 381;
				boolType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntegralTypeContext integralType() {
			return GetRuleContext<IntegralTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FloatingPointTypeContext floatingPointType() {
			return GetRuleContext<FloatingPointTypeContext>(0);
		}
		public NumericTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericTypeContext numericType() {
		NumericTypeContext _localctx = new NumericTypeContext(Context, State);
		EnterRule(_localctx, 88, RULE_numericType);
		try {
			State = 386;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
			case LONG:
			case SHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 384;
				integralType();
				}
				break;
			case DECIMAL:
			case DOUBLE:
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 385;
				floatingPointType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegralTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHORT() { return GetToken(RuleEngineParser.SHORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(RuleEngineParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG() { return GetToken(RuleEngineParser.LONG, 0); }
		public IntegralTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integralType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegralType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegralTypeContext integralType() {
		IntegralTypeContext _localctx = new IntegralTypeContext(Context, State);
		EnterRule(_localctx, 90, RULE_integralType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 388;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << LONG) | (1L << SHORT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatingPointTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(RuleEngineParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(RuleEngineParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(RuleEngineParser.DECIMAL, 0); }
		public FloatingPointTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatingPointType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatingPointType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatingPointTypeContext floatingPointType() {
		FloatingPointTypeContext _localctx = new FloatingPointTypeContext(Context, State);
		EnterRule(_localctx, 92, RULE_floatingPointType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DECIMAL) | (1L << DOUBLE) | (1L << FLOAT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceOrTypeNameContext namespaceOrTypeName() {
			return GetRuleContext<NamespaceOrTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringTypeContext stringType() {
			return GetRuleContext<StringTypeContext>(0);
		}
		public ClassTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassTypeContext classType() {
		ClassTypeContext _localctx = new ClassTypeContext(Context, State);
		EnterRule(_localctx, 94, RULE_classType);
		try {
			State = 394;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 392;
				namespaceOrTypeName();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 393;
				stringType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(RuleEngineParser.BOOL, 0); }
		public BoolTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolTypeContext boolType() {
		BoolTypeContext _localctx = new BoolTypeContext(Context, State);
		EnterRule(_localctx, 96, RULE_boolType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396;
			Match(BOOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(RuleEngineParser.STRING, 0); }
		public StringTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringTypeContext stringType() {
		StringTypeContext _localctx = new StringTypeContext(Context, State);
		EnterRule(_localctx, 98, RULE_stringType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 398;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceOrTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedAliasMemberContext qualifiedAliasMember() {
			return GetRuleContext<QualifiedAliasMemberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(RuleEngineParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(RuleEngineParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentListContext[] typeArgumentList() {
			return GetRuleContexts<TypeArgumentListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentListContext typeArgumentList(int i) {
			return GetRuleContext<TypeArgumentListContext>(i);
		}
		public NamespaceOrTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceOrTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceOrTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceOrTypeNameContext namespaceOrTypeName() {
		NamespaceOrTypeNameContext _localctx = new NamespaceOrTypeNameContext(Context, State);
		EnterRule(_localctx, 100, RULE_namespaceOrTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 405;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				{
				State = 400;
				identifier();
				State = 402;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 401;
					typeArgumentList();
					}
				}

				}
				break;
			case 2:
				{
				State = 404;
				qualifiedAliasMember();
				}
				break;
			}
			State = 414;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 407;
				Match(DOT);
				State = 408;
				identifier();
				State = 410;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 409;
					typeArgumentList();
					}
				}

				}
				}
				State = 416;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(RuleEngineParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 102, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(RuleEngineParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BaseTypeContext[] baseType() {
			return GetRuleContexts<BaseTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BaseTypeContext baseType(int i) {
			return GetRuleContext<BaseTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(RuleEngineParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RuleEngineParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RuleEngineParser.COMMA, i);
		}
		public TypeArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentListContext typeArgumentList() {
		TypeArgumentListContext _localctx = new TypeArgumentListContext(Context, State);
		EnterRule(_localctx, 104, RULE_typeArgumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 419;
			Match(LT);
			State = 420;
			baseType();
			State = 425;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 421;
				Match(COMMA);
				State = 422;
				baseType();
				}
				}
				State = 427;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 428;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RuleEngineParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RuleEngineParser.COMMA, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 106, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 430;
			argument();
			State = 435;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 431;
				Match(COMMA);
				State = 432;
				argument();
				}
				}
				State = 437;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 108, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 438;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedAliasMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public QualifiedAliasMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedAliasMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleEngineVisitor<TResult> typedVisitor = visitor as IRuleEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedAliasMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedAliasMemberContext qualifiedAliasMember() {
		QualifiedAliasMemberContext _localctx = new QualifiedAliasMemberContext(Context, State);
		EnterRule(_localctx, 110, RULE_qualifiedAliasMember);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440;
			identifier();
			State = 441;
			Match(T__14);
			State = 442;
			identifier();
			State = 444;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				State = 443;
				typeArgumentList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '=', '\x1C1', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x3', '\x2', '\x5', '\x2', 't', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x5', '\x2', 'x', '\n', '\x2', '\x3', '\x2', '\x5', '\x2', '{', '\n', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x7F', '\n', '\x3', '\f', 
		'\x3', '\xE', '\x3', '\x82', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x5', '\x4', '\x86', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x5', '\b', '\x95', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x5', '\t', 
		'\x99', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\a', '\n', '\x9F', '\n', '\n', '\f', '\n', '\xE', '\n', '\xA2', '\v', 
		'\n', '\x3', '\n', '\x5', '\n', '\xA5', '\n', '\n', '\x5', '\n', '\xA7', 
		'\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\f', '\x3', '\f', '\a', '\f', '\xB0', '\n', '\f', '\f', 
		'\f', '\xE', '\f', '\xB3', '\v', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', 
		'\x5', '\x11', '\xCC', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\a', '\x16', '\xDB', '\n', '\x16', '\f', '\x16', '\xE', '\x16', 
		'\xDE', '\v', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\a', 
		'\x17', '\xE3', '\n', '\x17', '\f', '\x17', '\xE', '\x17', '\xE6', '\v', 
		'\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\a', '\x18', '\xEB', 
		'\n', '\x18', '\f', '\x18', '\xE', '\x18', '\xEE', '\v', '\x18', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\a', '\x19', '\xF3', '\n', '\x19', 
		'\f', '\x19', '\xE', '\x19', '\xF6', '\v', '\x19', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\a', '\x1A', '\xFB', '\n', '\x1A', '\f', '\x1A', 
		'\xE', '\x1A', '\xFE', '\v', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\a', '\x1B', '\x103', '\n', '\x1B', '\f', '\x1B', '\xE', '\x1B', 
		'\x106', '\v', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x10F', 
		'\n', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x113', '\n', 
		'\x1D', '\x3', '\x1D', '\a', '\x1D', '\x116', '\n', '\x1D', '\f', '\x1D', 
		'\xE', '\x1D', '\x119', '\v', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x11C', 
		'\n', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x120', '\n', 
		'\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x123', '\n', '\x1D', '\x3', '\x1D', 
		'\a', '\x1D', '\x126', '\n', '\x1D', '\f', '\x1D', '\xE', '\x1D', '\x129', 
		'\v', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x12C', '\n', '\x1D', '\a', 
		'\x1D', '\x12E', '\n', '\x1D', '\f', '\x1D', '\xE', '\x1D', '\x131', '\v', 
		'\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x5', '\x1E', '\x138', '\n', '\x1E', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', ' ', '\x3', ' ', '\x5', ' ', '\x13E', '\n', ' ', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x146', 
		'\n', '\"', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', '$', 
		'\x3', '$', '\x3', '$', '\x3', '$', '\x5', '$', '\x150', '\n', '$', '\x3', 
		'%', '\x3', '%', '\x3', '&', '\x3', '&', '\x3', '\'', '\x5', '\'', '\x157', 
		'\n', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x5', '\'', '\x15C', 
		'\n', '\'', '\x3', '(', '\x5', '(', '\x15F', '\n', '(', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\a', '(', '\x165', '\n', '(', '\f', '(', 
		'\xE', '(', '\x168', '\v', '(', '\x3', '(', '\x3', '(', '\x3', ')', '\x3', 
		')', '\x3', ')', '\x5', ')', '\x16F', '\n', ')', '\x3', ')', '\x3', ')', 
		'\x3', '*', '\x3', '*', '\x5', '*', '\x175', '\n', '*', '\x3', '*', '\x3', 
		'*', '\x3', '+', '\x3', '+', '\x3', ',', '\x3', ',', '\x5', ',', '\x17D', 
		'\n', ',', '\x3', '-', '\x3', '-', '\x5', '-', '\x181', '\n', '-', '\x3', 
		'.', '\x3', '.', '\x5', '.', '\x185', '\n', '.', '\x3', '/', '\x3', '/', 
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x31', '\x3', '\x31', '\x5', '\x31', 
		'\x18D', '\n', '\x31', '\x3', '\x32', '\x3', '\x32', '\x3', '\x33', '\x3', 
		'\x33', '\x3', '\x34', '\x3', '\x34', '\x5', '\x34', '\x195', '\n', '\x34', 
		'\x3', '\x34', '\x5', '\x34', '\x198', '\n', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x5', '\x34', '\x19D', '\n', '\x34', '\a', '\x34', 
		'\x19F', '\n', '\x34', '\f', '\x34', '\xE', '\x34', '\x1A2', '\v', '\x34', 
		'\x3', '\x35', '\x3', '\x35', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\a', '\x36', '\x1AA', '\n', '\x36', '\f', '\x36', '\xE', 
		'\x36', '\x1AD', '\v', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x37', 
		'\x3', '\x37', '\x3', '\x37', '\a', '\x37', '\x1B4', '\n', '\x37', '\f', 
		'\x37', '\xE', '\x37', '\x1B7', '\v', '\x37', '\x3', '\x38', '\x3', '\x38', 
		'\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x5', '\x39', 
		'\x1BF', '\n', '\x39', '\x3', '\x39', '\x2', '\x2', ':', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', 
		'\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', 
		'\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 
		'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', 
		'\x64', '\x66', 'h', 'j', 'l', 'n', 'p', '\x2', '\v', '\x4', '\x2', '\x3', 
		'\x3', '\a', '\xE', '\x3', '\x2', '+', ',', '\x3', '\x2', '\'', '*', '\x3', 
		'\x2', '\"', '#', '\x3', '\x2', '$', '&', '\x3', '\x2', '\x12', '\x13', 
		'\x3', '\x2', '\x15', '\x1D', '\x3', '\x2', '\x1A', '\x1C', '\x3', '\x2', 
		'\x17', '\x19', '\x2', '\x1C1', '\x2', 'z', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '|', '\x3', '\x2', '\x2', '\x2', '\x6', '\x85', '\x3', '\x2', '\x2', 
		'\x2', '\b', '\x87', '\x3', '\x2', '\x2', '\x2', '\n', '\x8B', '\x3', 
		'\x2', '\x2', '\x2', '\f', '\x8F', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'\x91', '\x3', '\x2', '\x2', '\x2', '\x10', '\x98', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x14', '\xAA', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\xAD', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\xB6', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xBA', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\xBF', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xC4', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\xCB', '\x3', '\x2', '\x2', '\x2', '\"', '\xCD', 
		'\x3', '\x2', '\x2', '\x2', '$', '\xD1', '\x3', '\x2', '\x2', '\x2', '&', 
		'\xD3', '\x3', '\x2', '\x2', '\x2', '(', '\xD5', '\x3', '\x2', '\x2', 
		'\x2', '*', '\xD7', '\x3', '\x2', '\x2', '\x2', ',', '\xDF', '\x3', '\x2', 
		'\x2', '\x2', '.', '\xE7', '\x3', '\x2', '\x2', '\x2', '\x30', '\xEF', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\xF7', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x36', '\x10E', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x110', '\x3', '\x2', '\x2', '\x2', ':', '\x137', 
		'\x3', '\x2', '\x2', '\x2', '<', '\x139', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x13B', '\x3', '\x2', '\x2', '\x2', '@', '\x13F', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x145', '\x3', '\x2', '\x2', '\x2', '\x44', '\x147', 
		'\x3', '\x2', '\x2', '\x2', '\x46', '\x14F', '\x3', '\x2', '\x2', '\x2', 
		'H', '\x151', '\x3', '\x2', '\x2', '\x2', 'J', '\x153', '\x3', '\x2', 
		'\x2', '\x2', 'L', '\x156', '\x3', '\x2', '\x2', '\x2', 'N', '\x15E', 
		'\x3', '\x2', '\x2', '\x2', 'P', '\x16E', '\x3', '\x2', '\x2', '\x2', 
		'R', '\x172', '\x3', '\x2', '\x2', '\x2', 'T', '\x178', '\x3', '\x2', 
		'\x2', '\x2', 'V', '\x17C', '\x3', '\x2', '\x2', '\x2', 'X', '\x180', 
		'\x3', '\x2', '\x2', '\x2', 'Z', '\x184', '\x3', '\x2', '\x2', '\x2', 
		'\\', '\x186', '\x3', '\x2', '\x2', '\x2', '^', '\x188', '\x3', '\x2', 
		'\x2', '\x2', '`', '\x18C', '\x3', '\x2', '\x2', '\x2', '\x62', '\x18E', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\x190', '\x3', '\x2', '\x2', '\x2', 
		'\x66', '\x197', '\x3', '\x2', '\x2', '\x2', 'h', '\x1A3', '\x3', '\x2', 
		'\x2', '\x2', 'j', '\x1A5', '\x3', '\x2', '\x2', '\x2', 'l', '\x1B0', 
		'\x3', '\x2', '\x2', '\x2', 'n', '\x1B8', '\x3', '\x2', '\x2', '\x2', 
		'p', '\x1BA', '\x3', '\x2', '\x2', '\x2', 'r', 't', '\x5', '\x4', '\x3', 
		'\x2', 's', 'r', '\x3', '\x2', '\x2', '\x2', 's', 't', '\x3', '\x2', '\x2', 
		'\x2', 't', 'u', '\x3', '\x2', '\x2', '\x2', 'u', '{', '\x5', '\x14', 
		'\v', '\x2', 'v', 'x', '\x5', '\x4', '\x3', '\x2', 'w', 'v', '\x3', '\x2', 
		'\x2', '\x2', 'w', 'x', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\x3', '\x2', 
		'\x2', '\x2', 'y', '{', '\x5', '\x16', '\f', '\x2', 'z', 's', '\x3', '\x2', 
		'\x2', '\x2', 'z', 'w', '\x3', '\x2', '\x2', '\x2', '{', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '|', '\x80', '\x5', '\x6', '\x4', '\x2', '}', '\x7F', 
		'\x5', '\x6', '\x4', '\x2', '~', '}', '\x3', '\x2', '\x2', '\x2', '\x7F', 
		'\x82', '\x3', '\x2', '\x2', '\x2', '\x80', '~', '\x3', '\x2', '\x2', 
		'\x2', '\x80', '\x81', '\x3', '\x2', '\x2', '\x2', '\x81', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x82', '\x80', '\x3', '\x2', '\x2', '\x2', '\x83', 
		'\x86', '\x5', '\b', '\x5', '\x2', '\x84', '\x86', '\x5', '\n', '\x6', 
		'\x2', '\x85', '\x83', '\x3', '\x2', '\x2', '\x2', '\x85', '\x84', '\x3', 
		'\x2', '\x2', '\x2', '\x86', '\a', '\x3', '\x2', '\x2', '\x2', '\x87', 
		'\x88', '\x5', 'V', ',', '\x2', '\x88', '\x89', '\x5', '\f', '\a', '\x2', 
		'\x89', '\x8A', '\a', '\x32', '\x2', '\x2', '\x8A', '\t', '\x3', '\x2', 
		'\x2', '\x2', '\x8B', '\x8C', '\x5', 'V', ',', '\x2', '\x8C', '\x8D', 
		'\x5', '\xE', '\b', '\x2', '\x8D', '\x8E', '\a', '\x32', '\x2', '\x2', 
		'\x8E', '\v', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\x5', 'h', 
		'\x35', '\x2', '\x90', '\r', '\x3', '\x2', '\x2', '\x2', '\x91', '\x92', 
		'\x5', 'h', '\x35', '\x2', '\x92', '\x94', '\a', '\x3', '\x2', '\x2', 
		'\x93', '\x95', '\x5', '\x10', '\t', '\x2', '\x94', '\x93', '\x3', '\x2', 
		'\x2', '\x2', '\x94', '\x95', '\x3', '\x2', '\x2', '\x2', '\x95', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\x96', '\x99', '\x5', ' ', '\x11', '\x2', 
		'\x97', '\x99', '\x5', '\x12', '\n', '\x2', '\x98', '\x96', '\x3', '\x2', 
		'\x2', '\x2', '\x98', '\x97', '\x3', '\x2', '\x2', '\x2', '\x99', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\x9A', '\xA6', '\a', ' ', '\x2', '\x2', '\x9B', 
		'\xA0', '\x5', '\x10', '\t', '\x2', '\x9C', '\x9D', '\a', '\x30', '\x2', 
		'\x2', '\x9D', '\x9F', '\x5', '\x10', '\t', '\x2', '\x9E', '\x9C', '\x3', 
		'\x2', '\x2', '\x2', '\x9F', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA0', 
		'\x9E', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\x3', '\x2', '\x2', 
		'\x2', '\xA1', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA0', '\x3', 
		'\x2', '\x2', '\x2', '\xA3', '\xA5', '\a', '\x30', '\x2', '\x2', '\xA4', 
		'\xA3', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', '\x3', '\x2', '\x2', 
		'\x2', '\xA5', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA6', '\x9B', '\x3', 
		'\x2', '\x2', '\x2', '\xA6', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA7', 
		'\xA8', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA9', '\a', '!', '\x2', 
		'\x2', '\xA9', '\x13', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAB', '\x5', 
		' ', '\x11', '\x2', '\xAB', '\xAC', '\a', '\x32', '\x2', '\x2', '\xAC', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xB1', '\x5', '\x18', '\r', 
		'\x2', '\xAE', '\xB0', '\x5', '\x18', '\r', '\x2', '\xAF', '\xAE', '\x3', 
		'\x2', '\x2', '\x2', '\xB0', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB1', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\x3', '\x2', '\x2', 
		'\x2', '\xB2', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB1', '\x3', 
		'\x2', '\x2', '\x2', '\xB4', '\xB5', '\x5', '\x1E', '\x10', '\x2', '\xB5', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\x5', '\x1A', '\xE', 
		'\x2', '\xB7', '\xB8', '\x5', '\x1C', '\xF', '\x2', '\xB8', '\xB9', '\a', 
		'\x32', '\x2', '\x2', '\xB9', '\x19', '\x3', '\x2', '\x2', '\x2', '\xBA', 
		'\xBB', '\a', '\x4', '\x2', '\x2', '\xBB', '\xBC', '\a', '\x1E', '\x2', 
		'\x2', '\xBC', '\xBD', '\x5', ' ', '\x11', '\x2', '\xBD', '\xBE', '\a', 
		'\x1F', '\x2', '\x2', '\xBE', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xBF', 
		'\xC0', '\a', '\x5', '\x2', '\x2', '\xC0', '\xC1', '\a', '\x1E', '\x2', 
		'\x2', '\xC1', '\xC2', '\x5', ' ', '\x11', '\x2', '\xC2', '\xC3', '\a', 
		'\x1F', '\x2', '\x2', '\xC3', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xC4', 
		'\xC5', '\a', '\x6', '\x2', '\x2', '\xC5', '\xC6', '\a', '\x1E', '\x2', 
		'\x2', '\xC6', '\xC7', '\x5', ' ', '\x11', '\x2', '\xC7', '\xC8', '\a', 
		'\x1F', '\x2', '\x2', '\xC8', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xC9', 
		'\xCC', '\x5', '\"', '\x12', '\x2', '\xCA', '\xCC', '\x5', '&', '\x14', 
		'\x2', '\xCB', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCA', '\x3', 
		'\x2', '\x2', '\x2', '\xCC', '!', '\x3', '\x2', '\x2', '\x2', '\xCD', 
		'\xCE', '\x5', '\x36', '\x1C', '\x2', '\xCE', '\xCF', '\x5', '$', '\x13', 
		'\x2', '\xCF', '\xD0', '\x5', ' ', '\x11', '\x2', '\xD0', '#', '\x3', 
		'\x2', '\x2', '\x2', '\xD1', '\xD2', '\t', '\x2', '\x2', '\x2', '\xD2', 
		'%', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD4', '\x5', '(', '\x15', '\x2', 
		'\xD4', '\'', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', '\x5', '*', 
		'\x16', '\x2', '\xD6', ')', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xDC', 
		'\x5', ',', '\x17', '\x2', '\xD8', '\xD9', '\a', '.', '\x2', '\x2', '\xD9', 
		'\xDB', '\x5', ',', '\x17', '\x2', '\xDA', '\xD8', '\x3', '\x2', '\x2', 
		'\x2', '\xDB', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDA', '\x3', 
		'\x2', '\x2', '\x2', '\xDC', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDD', 
		'+', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xDC', '\x3', '\x2', '\x2', 
		'\x2', '\xDF', '\xE4', '\x5', '.', '\x18', '\x2', '\xE0', '\xE1', '\a', 
		'-', '\x2', '\x2', '\xE1', '\xE3', '\x5', '.', '\x18', '\x2', '\xE2', 
		'\xE0', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE6', '\x3', '\x2', '\x2', 
		'\x2', '\xE4', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE5', '\x3', 
		'\x2', '\x2', '\x2', '\xE5', '-', '\x3', '\x2', '\x2', '\x2', '\xE6', 
		'\xE4', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xEC', '\x5', '\x30', '\x19', 
		'\x2', '\xE8', '\xE9', '\t', '\x3', '\x2', '\x2', '\xE9', '\xEB', '\x5', 
		'\x30', '\x19', '\x2', '\xEA', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xEB', 
		'\xEE', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xEA', '\x3', '\x2', '\x2', 
		'\x2', '\xEC', '\xED', '\x3', '\x2', '\x2', '\x2', '\xED', '/', '\x3', 
		'\x2', '\x2', '\x2', '\xEE', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEF', 
		'\xF4', '\x5', '\x32', '\x1A', '\x2', '\xF0', '\xF1', '\t', '\x4', '\x2', 
		'\x2', '\xF1', '\xF3', '\x5', '\x32', '\x1A', '\x2', '\xF2', '\xF0', '\x3', 
		'\x2', '\x2', '\x2', '\xF3', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF4', 
		'\xF2', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF5', '\x3', '\x2', '\x2', 
		'\x2', '\xF5', '\x31', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF4', '\x3', 
		'\x2', '\x2', '\x2', '\xF7', '\xFC', '\x5', '\x34', '\x1B', '\x2', '\xF8', 
		'\xF9', '\t', '\x5', '\x2', '\x2', '\xF9', '\xFB', '\x5', '\x34', '\x1B', 
		'\x2', '\xFA', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFE', '\x3', 
		'\x2', '\x2', '\x2', '\xFC', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xFC', 
		'\xFD', '\x3', '\x2', '\x2', '\x2', '\xFD', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\xFE', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x104', '\x5', 
		'\x36', '\x1C', '\x2', '\x100', '\x101', '\t', '\x6', '\x2', '\x2', '\x101', 
		'\x103', '\x5', '\x36', '\x1C', '\x2', '\x102', '\x100', '\x3', '\x2', 
		'\x2', '\x2', '\x103', '\x106', '\x3', '\x2', '\x2', '\x2', '\x104', '\x102', 
		'\x3', '\x2', '\x2', '\x2', '\x104', '\x105', '\x3', '\x2', '\x2', '\x2', 
		'\x105', '\x35', '\x3', '\x2', '\x2', '\x2', '\x106', '\x104', '\x3', 
		'\x2', '\x2', '\x2', '\x107', '\x10F', '\x5', '\x38', '\x1D', '\x2', '\x108', 
		'\x109', '\a', '\"', '\x2', '\x2', '\x109', '\x10F', '\x5', '\x36', '\x1C', 
		'\x2', '\x10A', '\x10B', '\a', '#', '\x2', '\x2', '\x10B', '\x10F', '\x5', 
		'\x36', '\x1C', '\x2', '\x10C', '\x10D', '\a', '/', '\x2', '\x2', '\x10D', 
		'\x10F', '\x5', '\x36', '\x1C', '\x2', '\x10E', '\x107', '\x3', '\x2', 
		'\x2', '\x2', '\x10E', '\x108', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x10A', 
		'\x3', '\x2', '\x2', '\x2', '\x10E', '\x10C', '\x3', '\x2', '\x2', '\x2', 
		'\x10F', '\x37', '\x3', '\x2', '\x2', '\x2', '\x110', '\x112', '\x5', 
		':', '\x1E', '\x2', '\x111', '\x113', '\a', '/', '\x2', '\x2', '\x112', 
		'\x111', '\x3', '\x2', '\x2', '\x2', '\x112', '\x113', '\x3', '\x2', '\x2', 
		'\x2', '\x113', '\x117', '\x3', '\x2', '\x2', '\x2', '\x114', '\x116', 
		'\x5', 'N', '(', '\x2', '\x115', '\x114', '\x3', '\x2', '\x2', '\x2', 
		'\x116', '\x119', '\x3', '\x2', '\x2', '\x2', '\x117', '\x115', '\x3', 
		'\x2', '\x2', '\x2', '\x117', '\x118', '\x3', '\x2', '\x2', '\x2', '\x118', 
		'\x11B', '\x3', '\x2', '\x2', '\x2', '\x119', '\x117', '\x3', '\x2', '\x2', 
		'\x2', '\x11A', '\x11C', '\a', '/', '\x2', '\x2', '\x11B', '\x11A', '\x3', 
		'\x2', '\x2', '\x2', '\x11B', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x11C', 
		'\x12F', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x120', '\x5', 'L', '\'', 
		'\x2', '\x11E', '\x120', '\x5', 'R', '*', '\x2', '\x11F', '\x11D', '\x3', 
		'\x2', '\x2', '\x2', '\x11F', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x120', 
		'\x122', '\x3', '\x2', '\x2', '\x2', '\x121', '\x123', '\a', '/', '\x2', 
		'\x2', '\x122', '\x121', '\x3', '\x2', '\x2', '\x2', '\x122', '\x123', 
		'\x3', '\x2', '\x2', '\x2', '\x123', '\x127', '\x3', '\x2', '\x2', '\x2', 
		'\x124', '\x126', '\x5', 'N', '(', '\x2', '\x125', '\x124', '\x3', '\x2', 
		'\x2', '\x2', '\x126', '\x129', '\x3', '\x2', '\x2', '\x2', '\x127', '\x125', 
		'\x3', '\x2', '\x2', '\x2', '\x127', '\x128', '\x3', '\x2', '\x2', '\x2', 
		'\x128', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x129', '\x127', '\x3', 
		'\x2', '\x2', '\x2', '\x12A', '\x12C', '\a', '/', '\x2', '\x2', '\x12B', 
		'\x12A', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x12C', '\x3', '\x2', '\x2', 
		'\x2', '\x12C', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x11F', 
		'\x3', '\x2', '\x2', '\x2', '\x12E', '\x131', '\x3', '\x2', '\x2', '\x2', 
		'\x12F', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x130', '\x3', 
		'\x2', '\x2', '\x2', '\x130', '\x39', '\x3', '\x2', '\x2', '\x2', '\x131', 
		'\x12F', '\x3', '\x2', '\x2', '\x2', '\x132', '\x138', '\x5', '<', '\x1F', 
		'\x2', '\x133', '\x138', '\x5', '>', ' ', '\x2', '\x134', '\x138', '\x5', 
		'@', '!', '\x2', '\x135', '\x138', '\x5', '\x42', '\"', '\x2', '\x136', 
		'\x138', '\x5', '\x44', '#', '\x2', '\x137', '\x132', '\x3', '\x2', '\x2', 
		'\x2', '\x137', '\x133', '\x3', '\x2', '\x2', '\x2', '\x137', '\x134', 
		'\x3', '\x2', '\x2', '\x2', '\x137', '\x135', '\x3', '\x2', '\x2', '\x2', 
		'\x137', '\x136', '\x3', '\x2', '\x2', '\x2', '\x138', ';', '\x3', '\x2', 
		'\x2', '\x2', '\x139', '\x13A', '\x5', '\x46', '$', '\x2', '\x13A', '=', 
		'\x3', '\x2', '\x2', '\x2', '\x13B', '\x13D', '\x5', 'h', '\x35', '\x2', 
		'\x13C', '\x13E', '\x5', 'j', '\x36', '\x2', '\x13D', '\x13C', '\x3', 
		'\x2', '\x2', '\x2', '\x13D', '\x13E', '\x3', '\x2', '\x2', '\x2', '\x13E', 
		'?', '\x3', '\x2', '\x2', '\x2', '\x13F', '\x140', '\a', '\x1E', '\x2', 
		'\x2', '\x140', '\x141', '\x5', ' ', '\x11', '\x2', '\x141', '\x142', 
		'\a', '\x1F', '\x2', '\x2', '\x142', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\x143', '\x146', '\x5', 'T', '+', '\x2', '\x144', '\x146', '\x5', 'p', 
		'\x39', '\x2', '\x145', '\x143', '\x3', '\x2', '\x2', '\x2', '\x145', 
		'\x144', '\x3', '\x2', '\x2', '\x2', '\x146', '\x43', '\x3', '\x2', '\x2', 
		'\x2', '\x147', '\x148', '\a', '\x36', '\x2', '\x2', '\x148', '\x45', 
		'\x3', '\x2', '\x2', '\x2', '\x149', '\x150', '\x5', 'H', '%', '\x2', 
		'\x14A', '\x150', '\x5', 'J', '&', '\x2', '\x14B', '\x150', '\a', '\x37', 
		'\x2', '\x2', '\x14C', '\x150', '\a', '\x38', '\x2', '\x2', '\x14D', '\x150', 
		'\a', '\x34', '\x2', '\x2', '\x14E', '\x150', '\a', '\x14', '\x2', '\x2', 
		'\x14F', '\x149', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x14A', '\x3', 
		'\x2', '\x2', '\x2', '\x14F', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x14F', 
		'\x14C', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x14D', '\x3', '\x2', '\x2', 
		'\x2', '\x14F', '\x14E', '\x3', '\x2', '\x2', '\x2', '\x150', 'G', '\x3', 
		'\x2', '\x2', '\x2', '\x151', '\x152', '\t', '\a', '\x2', '\x2', '\x152', 
		'I', '\x3', '\x2', '\x2', '\x2', '\x153', '\x154', '\a', '\x35', '\x2', 
		'\x2', '\x154', 'K', '\x3', '\x2', '\x2', '\x2', '\x155', '\x157', '\a', 
		'\xF', '\x2', '\x2', '\x156', '\x155', '\x3', '\x2', '\x2', '\x2', '\x156', 
		'\x157', '\x3', '\x2', '\x2', '\x2', '\x157', '\x158', '\x3', '\x2', '\x2', 
		'\x2', '\x158', '\x159', '\a', '\x31', '\x2', '\x2', '\x159', '\x15B', 
		'\x5', 'h', '\x35', '\x2', '\x15A', '\x15C', '\x5', 'j', '\x36', '\x2', 
		'\x15B', '\x15A', '\x3', '\x2', '\x2', '\x2', '\x15B', '\x15C', '\x3', 
		'\x2', '\x2', '\x2', '\x15C', 'M', '\x3', '\x2', '\x2', '\x2', '\x15D', 
		'\x15F', '\a', '\xF', '\x2', '\x2', '\x15E', '\x15D', '\x3', '\x2', '\x2', 
		'\x2', '\x15E', '\x15F', '\x3', '\x2', '\x2', '\x2', '\x15F', '\x160', 
		'\x3', '\x2', '\x2', '\x2', '\x160', '\x161', '\a', ' ', '\x2', '\x2', 
		'\x161', '\x166', '\x5', 'P', ')', '\x2', '\x162', '\x163', '\a', '\x30', 
		'\x2', '\x2', '\x163', '\x165', '\x5', 'P', ')', '\x2', '\x164', '\x162', 
		'\x3', '\x2', '\x2', '\x2', '\x165', '\x168', '\x3', '\x2', '\x2', '\x2', 
		'\x166', '\x164', '\x3', '\x2', '\x2', '\x2', '\x166', '\x167', '\x3', 
		'\x2', '\x2', '\x2', '\x167', '\x169', '\x3', '\x2', '\x2', '\x2', '\x168', 
		'\x166', '\x3', '\x2', '\x2', '\x2', '\x169', '\x16A', '\a', '!', '\x2', 
		'\x2', '\x16A', 'O', '\x3', '\x2', '\x2', '\x2', '\x16B', '\x16C', '\x5', 
		'h', '\x35', '\x2', '\x16C', '\x16D', '\a', '\x10', '\x2', '\x2', '\x16D', 
		'\x16F', '\x3', '\x2', '\x2', '\x2', '\x16E', '\x16B', '\x3', '\x2', '\x2', 
		'\x2', '\x16E', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x16F', '\x170', 
		'\x3', '\x2', '\x2', '\x2', '\x170', '\x171', '\x5', ' ', '\x11', '\x2', 
		'\x171', 'Q', '\x3', '\x2', '\x2', '\x2', '\x172', '\x174', '\a', '\x1E', 
		'\x2', '\x2', '\x173', '\x175', '\x5', 'l', '\x37', '\x2', '\x174', '\x173', 
		'\x3', '\x2', '\x2', '\x2', '\x174', '\x175', '\x3', '\x2', '\x2', '\x2', 
		'\x175', '\x176', '\x3', '\x2', '\x2', '\x2', '\x176', '\x177', '\a', 
		'\x1F', '\x2', '\x2', '\x177', 'S', '\x3', '\x2', '\x2', '\x2', '\x178', 
		'\x179', '\t', '\b', '\x2', '\x2', '\x179', 'U', '\x3', '\x2', '\x2', 
		'\x2', '\x17A', '\x17D', '\x5', 'X', '-', '\x2', '\x17B', '\x17D', '\x5', 
		'`', '\x31', '\x2', '\x17C', '\x17A', '\x3', '\x2', '\x2', '\x2', '\x17C', 
		'\x17B', '\x3', '\x2', '\x2', '\x2', '\x17D', 'W', '\x3', '\x2', '\x2', 
		'\x2', '\x17E', '\x181', '\x5', 'Z', '.', '\x2', '\x17F', '\x181', '\x5', 
		'\x62', '\x32', '\x2', '\x180', '\x17E', '\x3', '\x2', '\x2', '\x2', '\x180', 
		'\x17F', '\x3', '\x2', '\x2', '\x2', '\x181', 'Y', '\x3', '\x2', '\x2', 
		'\x2', '\x182', '\x185', '\x5', '\\', '/', '\x2', '\x183', '\x185', '\x5', 
		'^', '\x30', '\x2', '\x184', '\x182', '\x3', '\x2', '\x2', '\x2', '\x184', 
		'\x183', '\x3', '\x2', '\x2', '\x2', '\x185', '[', '\x3', '\x2', '\x2', 
		'\x2', '\x186', '\x187', '\t', '\t', '\x2', '\x2', '\x187', ']', '\x3', 
		'\x2', '\x2', '\x2', '\x188', '\x189', '\t', '\n', '\x2', '\x2', '\x189', 
		'_', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x18D', '\x5', '\x66', '\x34', 
		'\x2', '\x18B', '\x18D', '\x5', '\x64', '\x33', '\x2', '\x18C', '\x18A', 
		'\x3', '\x2', '\x2', '\x2', '\x18C', '\x18B', '\x3', '\x2', '\x2', '\x2', 
		'\x18D', '\x61', '\x3', '\x2', '\x2', '\x2', '\x18E', '\x18F', '\a', '\x15', 
		'\x2', '\x2', '\x18F', '\x63', '\x3', '\x2', '\x2', '\x2', '\x190', '\x191', 
		'\a', '\x1D', '\x2', '\x2', '\x191', '\x65', '\x3', '\x2', '\x2', '\x2', 
		'\x192', '\x194', '\x5', 'h', '\x35', '\x2', '\x193', '\x195', '\x5', 
		'j', '\x36', '\x2', '\x194', '\x193', '\x3', '\x2', '\x2', '\x2', '\x194', 
		'\x195', '\x3', '\x2', '\x2', '\x2', '\x195', '\x198', '\x3', '\x2', '\x2', 
		'\x2', '\x196', '\x198', '\x5', 'p', '\x39', '\x2', '\x197', '\x192', 
		'\x3', '\x2', '\x2', '\x2', '\x197', '\x196', '\x3', '\x2', '\x2', '\x2', 
		'\x198', '\x1A0', '\x3', '\x2', '\x2', '\x2', '\x199', '\x19A', '\a', 
		'\x31', '\x2', '\x2', '\x19A', '\x19C', '\x5', 'h', '\x35', '\x2', '\x19B', 
		'\x19D', '\x5', 'j', '\x36', '\x2', '\x19C', '\x19B', '\x3', '\x2', '\x2', 
		'\x2', '\x19C', '\x19D', '\x3', '\x2', '\x2', '\x2', '\x19D', '\x19F', 
		'\x3', '\x2', '\x2', '\x2', '\x19E', '\x199', '\x3', '\x2', '\x2', '\x2', 
		'\x19F', '\x1A2', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\x19E', '\x3', 
		'\x2', '\x2', '\x2', '\x1A0', '\x1A1', '\x3', '\x2', '\x2', '\x2', '\x1A1', 
		'g', '\x3', '\x2', '\x2', '\x2', '\x1A2', '\x1A0', '\x3', '\x2', '\x2', 
		'\x2', '\x1A3', '\x1A4', '\a', '\x33', '\x2', '\x2', '\x1A4', 'i', '\x3', 
		'\x2', '\x2', '\x2', '\x1A5', '\x1A6', '\a', '(', '\x2', '\x2', '\x1A6', 
		'\x1AB', '\x5', 'V', ',', '\x2', '\x1A7', '\x1A8', '\a', '\x30', '\x2', 
		'\x2', '\x1A8', '\x1AA', '\x5', 'V', ',', '\x2', '\x1A9', '\x1A7', '\x3', 
		'\x2', '\x2', '\x2', '\x1AA', '\x1AD', '\x3', '\x2', '\x2', '\x2', '\x1AB', 
		'\x1A9', '\x3', '\x2', '\x2', '\x2', '\x1AB', '\x1AC', '\x3', '\x2', '\x2', 
		'\x2', '\x1AC', '\x1AE', '\x3', '\x2', '\x2', '\x2', '\x1AD', '\x1AB', 
		'\x3', '\x2', '\x2', '\x2', '\x1AE', '\x1AF', '\a', '\'', '\x2', '\x2', 
		'\x1AF', 'k', '\x3', '\x2', '\x2', '\x2', '\x1B0', '\x1B5', '\x5', 'n', 
		'\x38', '\x2', '\x1B1', '\x1B2', '\a', '\x30', '\x2', '\x2', '\x1B2', 
		'\x1B4', '\x5', 'n', '\x38', '\x2', '\x1B3', '\x1B1', '\x3', '\x2', '\x2', 
		'\x2', '\x1B4', '\x1B7', '\x3', '\x2', '\x2', '\x2', '\x1B5', '\x1B3', 
		'\x3', '\x2', '\x2', '\x2', '\x1B5', '\x1B6', '\x3', '\x2', '\x2', '\x2', 
		'\x1B6', 'm', '\x3', '\x2', '\x2', '\x2', '\x1B7', '\x1B5', '\x3', '\x2', 
		'\x2', '\x2', '\x1B8', '\x1B9', '\x5', ' ', '\x11', '\x2', '\x1B9', 'o', 
		'\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1BB', '\x5', 'h', '\x35', '\x2', 
		'\x1BB', '\x1BC', '\a', '\x11', '\x2', '\x2', '\x1BC', '\x1BE', '\x5', 
		'h', '\x35', '\x2', '\x1BD', '\x1BF', '\x5', 'j', '\x36', '\x2', '\x1BE', 
		'\x1BD', '\x3', '\x2', '\x2', '\x2', '\x1BE', '\x1BF', '\x3', '\x2', '\x2', 
		'\x2', '\x1BF', 'q', '\x3', '\x2', '\x2', '\x2', '\x32', 's', 'w', 'z', 
		'\x80', '\x85', '\x94', '\x98', '\xA0', '\xA4', '\xA6', '\xB1', '\xCB', 
		'\xDC', '\xE4', '\xEC', '\xF4', '\xFC', '\x104', '\x10E', '\x112', '\x117', 
		'\x11B', '\x11F', '\x122', '\x127', '\x12B', '\x12F', '\x137', '\x13D', 
		'\x145', '\x14F', '\x156', '\x15B', '\x15E', '\x166', '\x16E', '\x174', 
		'\x17C', '\x180', '\x184', '\x18C', '\x194', '\x197', '\x19C', '\x1A0', 
		'\x1AB', '\x1B5', '\x1BE',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Min.RuleEngine
